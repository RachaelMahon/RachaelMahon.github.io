{"version":3,"file":"static/webpack/static/development/pages/index.js.4518b2de703e602c38b0.hot-update.js","sources":["webpack:///./components/MapChart.js"],"sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport data from '../data/mapData.json';\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent }) => {\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={data}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    let KEITH_FACT_TEXT;\n                    let FABERGE_EGGS_COUNT;\n                    const { NAME, POP_EST, FABERGE_EGGS, KEITH_FACT } = geo.properties;\n                    if (!FABERGE_EGGS) {\n                        FABERGE_EGGS_COUNT = \"zero\";\n                    } else {\n                        FABERGE_EGGS_COUNT = FABERGE_EGGS;\n                    }\n                    if (!KEITH_FACT) {\n                        KEITH_FACT_TEXT = \"Keith hasn't made a holy show of himself in this country yet. Check back later.\";\n                    } else {\n                        KEITH_FACT_TEXT = KEITH_FACT;\n                    }\n                    setTooltipContent(`${NAME} - Faberge Eggs: ${FABERGE_EGGS_COUNT} - Keith fact: ${KEITH_FACT_TEXT}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#f7dbea\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#e587b9\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#d74894\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AA8CA;AACA;AACA;;;;A","sourceRoot":""}